#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('comppw:server');
var http = require('http');
var tools = require('../routes/chattools.js');
/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
/**
 * Create HTTP server.
 */
var server = http.createServer(app);
var io = require('socket.io')(server);
io.on('connection', function(socket) {
    tools.checkban(socket);
    socket.on('set name', function(name) {
        if (name == '') socket.emit('invalid username')
        else {
            socket.username = name;
            tools.checkAdmin(socket);
            io.sockets.emit('log', 'âš¡ ' + name + ' connected');
            socket.emit('enable')
            io.to('admin').emit('userlist', tools.users(io));
        }
    });
    socket.on('send chat', function(text) {
        if (text != '') io.sockets.emit('log', socket.username + ": " + text)
    });
    socket.on('disconnect', function() {
        if (socket.kicked) io.sockets.emit('log', socket.username + ' was kicked' + ' ðŸ‘ž');
        else if (socket.banned) io.sockets.emit('log', socket.username + ' was banned' + ' ðŸš«');
        else io.sockets.emit('log', socket.username + ' disconnected' + ' âš¡');
        io.to('admin').emit('userlist', tools.users(io));
    })
    socket.on('update userlist', function() {
        io.to('admin').emit('userlist', tools.users(io));
    });
    socket.on('kick', function(id) {
        io.sockets.connected[id].kicked = true;
        socket.broadcast.to(id).emit('kicked');
        io.sockets.connected[id].disconnect();
    })
    socket.on('ban', function(id) {
        tools.banip(io.sockets.connected[id].socket.handshake.address);
        io.sockets.connected[id].banned = true;
        socket.broadcast.to(id).emit('banned');
        io.sockets.connected[id].disconnect();
    })
});
/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    var port = parseInt(val, 10);
    if (isNaN(port)) {
        // named pipe
        return val;
    }
    if (port >= 0) {
        // port number
        return port;
    }
    return false;
}
/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }
    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}
/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
}